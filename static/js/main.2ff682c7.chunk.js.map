{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["infaredTempService","name","uuid","data","notification","configuration","period","humidityService","barometerService","opticalService","movementService","App","state","enableService","serviceObj","_this","server","getPrimaryService","then","service","getCharacteristic","characteristic","writeValue","Uint8Array","of","console","log","concat","readCharacteristic","startNotifications","_this2","this","react_default","a","createElement","className","Object","keys","map","key","k","onClick","navigator","bluetooth","requestDevice","filters","optionalServices","device","gatt","connect","addEventListener","evt","value","target","setState","infared","objectTemp","getUint16","ambientTemp","humidity","temp","barometer","getUint32","pressure","m","e","optical","lux","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ff682c7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst infaredTempService = {\n  name: 'infared',\n  uuid: 'f000aa00-0451-4000-b000-000000000000',\n  data: 'f000aa01-0451-4000-b000-000000000000',\n  notification: '00002902-0000-1000-8000-00805f9b34fb',\n  configuration: 'f000aa02-0451-4000-b000-000000000000',\n  period: 'f000aa03-0451-4000-b000-000000000000',\n}\n\nconst humidityService = {\n  name: 'humidity',\n  uuid: 'f000aa20-0451-4000-b000-000000000000',\n  data: 'f000aa21-0451-4000-b000-000000000000',\n  notification: '00002902-0000-1000-8000-00805f9b34fb',\n  configuration: 'f000aa22-0451-4000-b000-000000000000',\n  period: 'f000aa23-0451-4000-b000-000000000000',\n}\n\nconst barometerService = {\n  name: 'barometer',\n  uuid: 'f000aa40-0451-4000-b000-000000000000',\n  data: 'f000aa41-0451-4000-b000-000000000000',\n  notification: '00002902-0000-1000-8000-00805f9b34fb',\n  configuration: 'f000aa42-0451-4000-b000-000000000000',\n  period: 'f000aa44-0451-4000-b000-000000000000',\n}\n\nconst opticalService = {\n  name: 'optical',\n  uuid: 'f000aa70-0451-4000-b000-000000000000',\n  data: 'f000aa71-0451-4000-b000-000000000000',\n  notification: '00002902-0000-1000-8000-00805f9b34fb',\n  configuration: 'f000aa72-0451-4000-b000-000000000000',\n  period: 'f000aa73-0451-4000-b000-000000000000',\n}\n\nconst movementService = {\n  name: 'movement',\n  uuid: 'f000aa80-0451-4000-b000-000000000000',\n  data: 'f000aa81-0451-4000-b000-000000000000',\n  notification: '00002902-0000-1000-8000-00805f9b34fb',\n  configuration: 'f000aa82-0451-4000-b000-000000000000',\n  period: 'f000aa83-0451-4000-b000-000000000000',\n}\n\nclass App extends Component {\n\n  state = {}\n\n  enableService = (serviceObj) => \n    this.server.getPrimaryService(serviceObj.uuid)\n      .then(service => service.getCharacteristic(serviceObj.configuration))\n      .then(characteristic => characteristic.writeValue(Uint8Array.of(1)))\n      .then(() => console.log(`enabled ${serviceObj.name}`))\n\n  readCharacteristic = (serviceObj, characteristic) => \n    this.server.getPrimaryService(serviceObj.uuid)\n      .then(service => service.getCharacteristic(serviceObj[characteristic]))\n      .then(characteristic => characteristic.startNotifications())\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n          {Object.keys(this.state).map(key => \n            <div>\n              <h3>{key}</h3>\n              {Object.keys(this.state[key]).map(k => \n                <p>{k} : {this.state[key][k]}</p>\n              )}\n            </div>\n          )}\n\n          <button onClick={() => {\n            navigator.bluetooth.requestDevice({ \n              filters: [{\n                name: 'CC2650 SensorTag'\n              }],\n              optionalServices: [\n                humidityService.uuid,\n                barometerService.uuid,\n                infaredTempService.uuid,\n                opticalService.uuid,\n                movementService.uuid,\n              ] \n            })\n            .then(device => device.gatt.connect())\n            .then(server => this.server = server)\n            .then(() => {\n              this.enableService(infaredTempService)\n              this.enableService(barometerService)\n              this.enableService(humidityService)\n              this.enableService(opticalService)\n              //this.enableService(movementService)\n\n              // TODO: movementService configuration\n            })\n          }}>connect!</button>\n\n          <button\n            onClick={() => {\n              this.readCharacteristic(infaredTempService, 'data')\n              .then(characteristic => {\n                characteristic.addEventListener('characteristicvaluechanged',\n                evt => {\n                  var value = evt.target.value\n                  const SCALE_LSB = 0.03125\n                  \n                  this.setState({ infared: {\n                    objectTemp: (value.getUint16(0, true) >> 2) * SCALE_LSB,\n                    ambientTemp: (value.getUint16(2, true) >> 2) * SCALE_LSB\n                  }})\n                });\n              })\n            }}\n          >\n            read infared\n          </button>\n\n          <button\n            onClick={() => {\n              this.readCharacteristic(humidityService, 'data')\n              .then(characteristic => {\n                characteristic.addEventListener('characteristicvaluechanged',\n                evt => {\n                  var value = evt.target.value\n                  \n                  this.setState({ humidity: {\n                    temp: (value.getUint16(0, true) / 65536) * 165 - 40,\n                    humidity: ((value.getUint16(2, true) & ~0x0003) / 65536) * 100\n                  }})\n                });\n              })\n            }}\n          >\n            read humidity sensor\n          </button>\n\n          <button\n            onClick={() => {\n              this.readCharacteristic(barometerService, 'data')\n              .then(characteristic => {\n                characteristic.addEventListener('characteristicvaluechanged',\n                evt => {\n                  var value = evt.target.value\n                  \n                  this.setState({ barometer: {\n                    temp: (value.getUint32(0, true) & 0x00ffffff) / 100,\n                    pressure: ((value.getUint32(2, true) >> 8) & 0x00ffffff) / 100\n                  }})\n                });\n              })\n            }}\n          >\n            read barometer\n          </button>\n\n          <button\n            onClick={() => {\n              this.readCharacteristic(opticalService, 'data')\n              .then(characteristic => {\n                characteristic.addEventListener('characteristicvaluechanged',\n                evt => {\n                  var value = evt.target.value\n                  var m = value.getUint16(0, true) & 0x0FFF\n                  var e = (value.getUint16(0, true) & 0xF000) >> 12\n  \n                  e = (e === 0) ? 1 : 2 << (e - 1)\n  \n                  this.setState({ optical: { lux: m * (0.01 * e)} })\n                });\n              })\n            }}\n          >\n            read optical\n          </button>\n\n          {/*<button\n            onClick={() => {\n              this.readCharacteristic(movementService, 'data')\n              .then(characteristic => {\n                characteristic.addEventListener('characteristicvaluechanged',\n                evt => {\n                  var value = evt.target.value\n                  var m = value.getUint16(0, true) & 0x0FFF\n                  var e = (value.getUint16(0, true) & 0xF000) >> 12\n  \n                  e = (e === 0) ? 1 : 2 << (e - 1)\n  \n                  this.setState({ movement: { \n                    gyroX: \n                    gyroY:\n                  } })\n                });\n              })\n            }}\n          >\n            read optical\n          </button>*/}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}